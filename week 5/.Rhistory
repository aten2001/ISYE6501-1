b = read.dna('Documents/abyss-2.0.2/14RCR5_abyss/14RCR5-scaffolds.fa',format = 'fasta',as.character = TRUE)
N50_calc(b)
library(ape)
b = read.dna('Documents/abyss-2.0.2/14RCR5_abyss/14RCR5-scaffolds.fa',format = 'fasta',as.character = TRUE)
N50_calc(b)
N50_calc <- function(x) {
contigs=NULL
cond <- length(x)
while (cond > 0) {
contigs <- c(contigs, length(x[[cond]]))
cond <- (cond -1)
}
N50 <- unlist(tapply(contigs, contigs, function(x) rep(x[1], sum(x))))
return(median(N50))
}
b = read.dna('Documents/abyss-2.0.2/14RCR5_abyss/14RCR5-scaffolds.fa',format = 'fasta',as.character = TRUE)
N50_calc(b)
b = read.dna('Documents/abyss-2.0.2/14RCR5_abyss/14RCR5-scaffolds.fa',format = 'fasta',as.character = TRUE)
N50_calc(b)
b = read.dna('Documents/abyss-2.0.2/14RCR5_abyss/14RCR5-contigs.fa',format = 'fasta',as.character = TRUE)
N50_calc(b)
b = read.dna('Documents/abyss-2.0.2/CO2-scaffolds.fa',format = 'fasta',as.character = TRUE)
N50_calc(b)
b = read.dna('Documents/abyss-2.0.2/14MGH5/14MGH5-scaffolds.fa',format = 'fasta',as.character = TRUE)
N50_calc(b)
b = read.dna('Documents/abyss-2.0.2/14RCR5_abyss/14RCR5-scaffolds.fa',format = 'fasta',as.character = TRUE)
N50_calc(b)
library(dplyr)    # for manipulating data frames
library(pracma)   # for handy math functions
library(wmtsa)  # Wavelet Methods for Time Series Analysis in R by William Constantine and Donald Percival
library(stringr) # for string manipulation
# discrete wavelet transform function
# assumes timeSeries is dataframe with 2 columns
# 1st column has time
# 2nd column has values (activity, body temp, etc)
# Jcirc is the DWT scale containing 24h
# returns dataframe with ultradian component, circadian component, and detrended series
timeSeriesDWT <- function(timeSeries, Jcirc,wfilt) {
Nsteps <- nrow(timeSeries)
reflectedts <- c(unlist(timeSeries[,2]),unlist(timeSeries[(Nsteps-1):2,2]))
while(wavMaxLevel(n.taps=8, n.sample=length(reflectedts), xform="modwt")<Jcirc)
reflectedts <- c(reflectedts,reflectedts)
DJt_circ <- wavMRDSum(reflectedts,levels=Jcirc,keep.smooth=FALSE, keep.details=TRUE,
reflect=TRUE,wavelet=wfilt,xform="modwt")
DJt_circalt <- wavMRDSum(reflectedts,levels=(Jcirc-1):Jcirc,keep.smooth=FALSE, keep.details=TRUE,
reflect=TRUE,wavelet=wfilt,xform="modwt")
DJt_ultr <- wavMRDSum(reflectedts,levels=1:(Jcirc-1),keep.smooth=FALSE, keep.details=TRUE,
reflect=TRUE,wavelet=wfilt,xform="modwt")
DJt_detr <- wavMRDSum(reflectedts,levels=1:Jcirc,keep.smooth=FALSE, keep.details=TRUE,
reflect=TRUE,wavelet=wfilt,xform="modwt")
output <- data.frame(time=timeSeries[1:Nsteps,1],x=timeSeries[,2],xcirc=DJt_circ[1:Nsteps],
xcircalt=DJt_circalt[1:Nsteps],xultr=DJt_ultr[1:Nsteps],xdetr=DJt_detr[1:Nsteps])
return(output)
}
# autocorrelation function with rhythmicity index (RI) and period estimate
autocorr <- function(timeSeries,doplot) {
TimeStep <- median(diff(timeSeries$time))
maxlag <- ceil(40/TimeStep)
autocorr <- acf(timeSeries$xdetr, lag.max = maxlag,type = c("correlation"),plot = FALSE)
# 5-point running average to smooth
autocorr_f <- convolve(c(as.vector(autocorr$acf),0,0,0,0,0,0), c(1/8, 1/4, 1/4, 1/4, 1/8),
conj = FALSE, type = c("filter"))
autocorr_f <- autocorr_f[3:length(autocorr_f)] # remove first two points so lines up correctly
halfday <- ceil(12/TimeStep)
fp <- findpeaks(autocorr_f[halfday:maxlag],sortstr=TRUE)
RI <- ifelse(!isempty(fp), max(c(fp[1,1],0)), 0)
tauAC <- ifelse(RI>0, TimeStep*(fp[1,2]-1+halfday-1), NA)
if(doplot) {
plot(TimeStep*autocorr$lag,autocorr$acf,type="l",xlab="Lag in hours",ylab="Autocorrelation",
main=paste("RI=",round(RI,3),"  period=",tauAC))
points(TimeStep*autocorr$lag[6:length(autocorr_f)],autocorr_f[6:length(autocorr_f)],type="l",col="red")
points(tauAC,RI,pch=25,col="blue")
}
output=c(RI,tauAC)
return(output)
}
setwd("~/Downloads")
plate= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame()
View(plate)
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
time = str_sub(t_plate[,1],1,3)
t_plate$V1 = as.numeric(time)
colnames(t_plate) = sample
t_plate = t_plate[-1,]
RI_all = matrix(data = c(1,1),nrow = 1,ncol = 2)
View(RI_all)
View(t_plate)
plate= read.csv('plate 6.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
plate= read.csv('plate 6.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
View(plate)
plate_1= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
View(plate_1)
plate= read.csv('plate 6.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
#plate_1= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
time = str_sub(t_plate[,1],1,3)
t_plate$V1 = as.numeric(time)
colnames(t_plate) = sample
t_plate = t_plate[-1,]
View(t_plate)
plate= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
plate_1= read.csv('plate 6.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
plate= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
plate= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
View(t_plate)
time = str_sub(t_plate[,1],1,3)
time = str_sub(t_plate[,1],1,2)
time = t_plate[,1]
plate= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
plate= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
#plate_1= read.csv('plate 6.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
plate= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
time = t_plate[,1]
t_plate$V1 = as.numeric(time)
colnames(t_plate) = sample
t_plate = t_plate[-1,]
View(t_plate)
plate= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
colnames(t_plate) = sample
t_plate = t_plate[-1,]
RI_all = matrix(data = c(1,1),nrow = 1,ncol = 2)
for (i in 2:length(t_plate)){
# example of application of autocorrelation to rhythmic time series
lumdata <- tbl_df(t_plate) %>%
transmute(time=.[[1]],x=as.numeric(as.character(.[[i]])))%>%# 1st column=time in days, 2nd column=lum data
filter(time>=0,time<=max(time))# choose time range to use (in hours), be sure to get rid of surge of biolum at start of recording
# detrend using discrete wavelet transform (important to detrend before applying autocorrelation)
TimeStep <- median(diff(lumdata$time))
Jcirc <- floor(log2(round(24/TimeStep))) # closest to circadian level
wfilt <- "s8"
lumdata <- timeSeriesDWT(lumdata,Jcirc,wfilt)
RI_all = rbind(RI_all,autocorr(lumdata,TRUE)) # change to FALSE if don't want autcorrelation plot
}
RI_all = RI_all[-1,]%>%as.data.frame()
colnames(RI_all) = c('RI', 'Period') # RI and period for inidivdual sample
write.csv(x = RI_all, file = 'individual RI&period.csv')
treatment<- c('H2O','#1-1','#1-2','#2-1','#2-2','#3-1','#3-2','#5-1') # treatments or genotypes
mean_RI_all = c()
for (i in 1:length(treatment)){
sample_no<- seq((i-1)*12+1,i*12,1)
mean_RI <- mean(unlist(RI_all[sample_no,1]))
mean_RI_all = c(mean_RI_all, mean_RI)
}
mean_RI_all = data.frame(treatment,mean_RI = mean_RI_all) # average RI for each treatment
write.csv(x = mean_RI_all, file = 'average RI.csv')
plate= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
#time = t_plate[,1]
#t_plate$V1 = as.numeric(time)
t_plate[,1]=as.numeric(t_plate[,1])
colnames(t_plate) = sample
t_plate = t_plate[-1,]
RI_all = matrix(data = c(1,1),nrow = 1,ncol = 2)
for (i in 2:length(t_plate)){
# example of application of autocorrelation to rhythmic time series
lumdata <- tbl_df(t_plate) %>%
transmute(time=.[[1]],x=as.numeric(as.character(.[[i]])))%>%# 1st column=time in days, 2nd column=lum data
filter(time>=0,time<=max(time))# choose time range to use (in hours), be sure to get rid of surge of biolum at start of recording
# detrend using discrete wavelet transform (important to detrend before applying autocorrelation)
TimeStep <- median(diff(lumdata$time))
Jcirc <- floor(log2(round(24/TimeStep))) # closest to circadian level
wfilt <- "s8"
lumdata <- timeSeriesDWT(lumdata,Jcirc,wfilt)
RI_all = rbind(RI_all,autocorr(lumdata,TRUE)) # change to FALSE if don't want autcorrelation plot
}
RI_all = RI_all[-1,]%>%as.data.frame()
colnames(RI_all) = c('RI', 'Period') # RI and period for inidivdual sample
write.csv(x = RI_all, file = 'individual RI&period.csv')
treatment<- c('H2O','#1-1','#1-2','#2-1','#2-2','#3-1','#3-2','#5-1') # treatments or genotypes
mean_RI_all = c()
for (i in 1:length(treatment)){
sample_no<- seq((i-1)*12+1,i*12,1)
mean_RI <- mean(unlist(RI_all[sample_no,1]))
mean_RI_all = c(mean_RI_all, mean_RI)
}
mean_RI_all = data.frame(treatment,mean_RI = mean_RI_all) # average RI for each treatment
write.csv(x = mean_RI_all, file = 'average RI.csv')
# threshold of RI > 0.15 or > 0.2 can work well as rhythmicity criterion
# test out on particular data set; depends on # of days and noise level
# I usually use 4 days, detrended
source('~/Downloads/RI and Period.R')
install.packages("pracma")
source('~/Downloads/RI and Period.R')
install.packages("wmtsa")
source('~/Downloads/RI and Period.R')
class(time)
class(class(time))
plate= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
time = t_plate[,1]
plate= read.csv('plate6.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
time = t_plate[,1]
plate= read.csv('plate 6.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
time = t_plate[,1]
plate= read.csv('plate 6.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
time = as.character(t_plate[,1])
time
plate= read.csv('plate 6.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
time = str_sub(t_plate[,1],1,3)
t_plate$V1 = as.numeric(time)
colnames(t_plate) = sample
t_plate = t_plate[-1,]
plate= read.csv('plate 6.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
t_plate[,1]
str_sub(t_plate[,1],1,3)
time = as.character(t_plate[,1])
as.numeric(gsub("([0-9]+).*$", "\\1", time))
plate= read.csv('plate 6.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
time = as.character(t_plate[,1])
time = as.numeric(gsub("([0-9]+).*$", "\\1", time))
t_plate$V1 = time
colnames(t_plate) = sample
t_plate = t_plate[-1,]
source('~/Downloads/RI and Period.R')
source('~/Downloads/RI and Period.R')
source('~/Downloads/RI and Period.R')
source('~/Downloads/RI and Period.R')
0.8030140765
0.7851283955
0.6737620019
0.7824048612
0.727869773
0.7870072815
0.7541645119
0.7442539293
source('~/Downloads/RI and Period.R')
source('~/Downloads/RI and Period.R')
source('~/Downloads/RI and Period.R')
source('~/Downloads/RI and Period.R')
0.7952970379
0.7789051592
0.7614762105
0.742773182
0.7823414567
0.7167979254
0.7228697413
0.6504570631
source('~/Downloads/RI and Period.R')
plate= read.csv('NO7.csv', header = F,stringsAsFactors = F)%>%as.data.frame() # read in the file containing lumi data
sample = plate[,"V1"]
sample[1]='time'
t_plate = t(plate)%>%as.data.frame()
time = as.character(t_plate[,1])
time = as.numeric(gsub("([0-9]+).*$", "\\1", time))
source('~/Downloads/RI and Period.R')
setwd("~/Desktop/Homework/week 5")
crime = read.table(file = 'uscrime.txt', sep = '', header = T)
library(dplyr)
library(ggplot2)
library(outliers)
library(gridExtra)
crime = read.table(file = 'uscrime.txt', sep = '', header = T)
crime = read.csv('uscrime.txt')
# arange the data in a descending manner
crime_desc = arrange(crime, desc(Crime))
Crime = read.table(file = 'uscrime.txt', sep = '', header = T)
